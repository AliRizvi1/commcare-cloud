#!/usr/bin/env bash
#
# {{ ansible_managed }}
#

scales=( 1 10 100 1000 3000 5000 10000 )
start=$(date)
for i in `seq {{ iterations }}`
do
    for j in `seq {{ reruns }}`
    do
        out=""
        conn_options=" -U postgres -h {{ groups['load_test_host'][0] }} -p 5432 "

        # Initialize database
        scale=$((scales[$i - 1]))
        pgbench{{ postgresql_version }} $conn_options -i -s $scale {{ db_name }}

        # Run actual test
        {% if item == "read" %}
        out+=$(pgbench{{ postgresql_version }} $conn_options -c {{ connections }} -j {{ threads }} -T {{ time_in_sec }} -S {{ db_name }})
        {% elif item == "writeread" %}
        out+=$(pgbench{{ postgresql_version }} $conn_options -c {{ connections }} -j {{ threads }} -T {{ time_in_sec }} {{ db_name }})
        {% elif item == "write" %}
        out+=$(pgbench{{ postgresql_version }} $conn_options -c {{ connections }} -j {{ threads }} -T {{ time_in_sec }} -N {{ db_name }})
        {% endif %}

        out+="\n\n"

        # Removes any dead data that is produced from querying
        psql $conn_options -d bench -c  "vacuum analyze;"

        # Get database table size
        out+=$(psql $conn_options -d bench -c  "checkpoint; SELECT relname, reltuples, (relpages * 8192) as size FROM pg_class ORDER BY relpages DESC limit 10;")

        # Send results
        echo -e "$out" | mail -s "[PGBench {{ item }} test][Scale $i] {{ iterations }} Iterations $start" {{ receiver }}
    done
done
