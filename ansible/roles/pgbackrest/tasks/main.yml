- include_vars: ../../postgresql/defaults/main.yml

- name: Install pgBackRest and requirements
  apt: name={{item}} state=installed
  with_items:
     - pgbackrest
     - libio-socket-ssl-perl
     - libxml-libxml-perl

- name: Adding configuration to postgresql.conf
  become: True
  blockinfile:
    dest: "{{ postgresql_config_home }}/postgresql.conf"
    block: |
      archive_command = 'pgbackrest --stanza=backup archive-push %p'
      archive_mode = on
      max_wal_senders = 3
      wal_level = hot_standby
  notify: Restart postgres
  when: not is_pg_standby and not hot_standby_server|default(False)

- name: Editing archive_command in postgresql.conf
  become: True
  lineinfile:
    dest: "{{ postgresql_config_home }}/postgresql.conf"
    regexp: '^archive_command ='
    line: "archive_command = 'rsync -a %p postgres@{{ hot_standby_server }}:/opt/data/postgresql/wal_archive/%f; pgbackrest --stanza=backup archive-push %p'"
  notify: Restart postgres
  when: not is_pg_standby and hot_standby_server|default(False)
  
- name: Creating pgbackrest.conf file
  become: True
  template:
    src=pgbackrest.conf.j2
    dest=/etc/pgbackrest.conf
    owner=postgres
    group=postgres
    mode=640

- stat: path="{{postgresql_backup_dir}}/archive/backup"
  register: stanza

- name: Creating postgres stanza
  become: True
  become_user: postgres
  vars:
    ansible_ssh_pipelining: True
  shell: pgbackrest --stanza=backup --log-level-console=info stanza-create
  # play when it's a standby or it's a master with no standby (and stanza does not already exist)
  when: (is_pg_standby or (not is_pg_standby and not hot_standby_server|default(False))) and not stanza.stat.exists

- name: Creating postgres S3 stanza
  become: True
  become_user: postgres
  vars:
    ansible_ssh_pipelining: True
  shell: pgbackrest --stanza=backups3 --log-level-console=info stanza-create
  # play when it's a standby or it's a master with no standby (and s3 backups enabled)
  when: (is_pg_standby or (not is_pg_standby and not hot_standby_server|default(False))) and postgres_s3|default(false)

- name: Create Daily Cron job
  sudo: yes
  cron:
    name: "Backup postgres daily (incremental)"
    job: "/usr/bin/pgbackrest --type=incr --stanza=backup backup"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: "1,2,3,4,5,6"
    user: postgres
    cron_file: backup_postgres
  when: (is_pg_standby or (not is_pg_standby and not hot_standby_server|default(False))) and backup_postgres

- name: Create Daily Cron job S3
  sudo: yes
  cron:
    name: "Backup postgres daily (incremental)"
    job: "/usr/bin/pgbackrest --type=incr --stanza=backups3 backup"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: "1,2,3,4,5,6"
    user: postgres
    cron_file: backup_postgres
  when: (is_pg_standby or (not is_pg_standby and not hot_standby_server|default(False))) and postgres_s3|default(false)

- name: Create Weekly Cron job
  sudo: yes
  cron:
    name: "Backup postgres weekly (full backup)"
    job: "/usr/bin/pgbackrest --type=full --stanza=backup backup"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: 0
    user: postgres
    cron_file: backup_postgres
  when: (is_pg_standby or (not is_pg_standby and not hot_standby_server|default(False))) and backup_postgres

- name: Create Weekly Cron job S3
  sudo: yes
  cron:
    name: "Backup postgres weekly (full backup)"
    job: "/usr/bin/pgbackrest --type=full --stanza=backups3 backup"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: 0
    user: postgres
    cron_file: backup_postgres
  when: (is_pg_standby or (not is_pg_standby and not hot_standby_server|default(False))) and postgres_s3|default(false)

- include: purge_old_scripts.yml
