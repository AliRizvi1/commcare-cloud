# Config files contain secret keys so set mode=0640

- include_vars: ../../install/defaults/main.yml

# NOTE riak config files are only created/updated if they do not already exist
# or if '-e force_riak_config=host1,host2,...' is specified on the command line
# listing each node to force configure (use inventory_hostname_short host name).
# This is because it can be dangerous to change the configuration of a running
# node. In some cases it will refuse to start with the new configuration.
- set_fact: _force_riak_config="{{ 'yes'
    if inventory_hostname_short in (force_riak_config | default('')).split(',')
        or force_riak_config | default('') == 'all'
    else '' }}"

# HACK set fact because defaults cannot be loaded from other hosts
- set_fact: riak_nodename={{ riak_nodename }}

- set_fact: conf_path={{ hostvars[inventory_hostname].get(name + '_conf', defaults[name + '_conf']) }}

- name: Create {{ name }} data dirs
  file: >
    path="{{ item }}"
    state=directory
    owner={{ name }}
    group=riak
    mode=0770
  notify: restart {{ name }}
  with_items: "{{ data_dirs }}"

- name: Copy {{ name }} defaults
  # works on ubuntu. may need to do other things for other platforms
  copy: >
    content="ulimit -n {{ ulimit_n }}"
    dest=/etc/default/{{ service }}
    owner=root
    group=root
    force=yes

- name: Stat {{ name }} conf
  stat: path={{ conf_path }}
  register: _conf
  changed_when: false
  failed_when: false
  always_run: true

- name: Stat {{ name }} {{ extra_conf }}
  stat: path={{ _conf.stat.path | dirname }}/{{ extra_conf }}
  register: _extra_conf
  changed_when: false
  failed_when: false
  when: extra_conf != ""

- name: Create {{ name }} conf dir
  file: >
    path="{{ conf_path | dirname }}"
    state=directory
    owner=root
    group=root
  when: _force_riak_config or not _conf.stat.exists

- name: Set {{ name }} conf
  template: >
    src={{ name }}.conf.j2
    dest={{ conf_path }}
    owner=root
    group=riak
    mode=0640
  notify: restart {{ name }}
  when: _force_riak_config or not _conf.stat.exists

- name: Set {{ name }} extra conf
  template: >
    src={{ extra_conf }}.j2
    dest={{ _extra_conf.stat.path }}
    owner=root
    group=riak
    mode=0640
  notify: restart {{ name }}
  when: extra_conf != "" and (_force_riak_config or not _extra_conf.stat.exists)

- name: Drop {{ name }} {{ drop_conf }}
  file: >
    path={{ conf_path | dirname }}/{{ drop_conf }}
    state=absent
  notify: restart {{ name }}
  when: _force_riak_config and drop_conf != ""

- name: Start {{ name }}
  service: name={{ service }} state=started enabled=yes
  when: not riakcs_deb_check.get("skipped")
