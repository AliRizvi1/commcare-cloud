# Create new admin user and set riak_key and riak_secret facts

- name: Turn on anonymous user creation
  lineinfile:
    dest: "{{ riakcs_dest }}/{{ riakcs_conf }}"
    regexp: "anonymous_user_creation = off"
    line: "anonymous_user_creation = on"
    state: present

# Note this can't be notify because we need it to restart immediately
- name: Restart RiakCS
  service: name=riak-cs state=restarted enabled=yes

# Random email address because a given email can only be used once. It
# may be necessary to generate a new admin user if something fails
# between when the new user is created and when its keys are written to
# the config file (in that case there may be an orphaned admin user
# for which we do not know the key or secret... do we care?).
- name: Generate random email for new Riak CS admin user
  set_fact: riakcs_admin_email="devops+riakcs{{ 1000000 | random }}@dimagi.com"

- name: Create Riak CS admin user
  command: >
    curl -H 'Content-Type: application/json' 
    -XPOST http://{{ inventory_hostname }}:{{ riakcs_port }}/riak-cs/user 
    --data '{"email":"{{ riakcs_admin_email }}","name":"{{ riakcs_admin_name }}"}'
  register: riak_create_user_result

- name: Turn off anonymous user creation
  lineinfile:
    dest: "{{ riakcs_dest }}/{{ riakcs_conf }}"
    regexp: "anonymous_user_creation = on"
    line: "anonymous_user_creation = off"
    state: present
  notify: restart riakcs

- name: Decode Riak CS admin user JSON
  set_fact:
    riakcs_admin_user: "{{ riak_create_user_result.stdout
                           if riak_create_user_result.stdout.strip().startswith('{')
                           else '{}' | from_json }}"

# Set key facts last. Otherwise additional tasks in this file would be
# skipped because of the `when` condition on the `include` of this file.
- set_fact: riak_key="{{ riakcs_admin_user.key_id }}"
  when: riakcs_admin_user.key_id is defined

- set_fact: riak_secret="{{ riakcs_admin_user.key_secret }}"
  when: riakcs_admin_user.key_secret is defined
