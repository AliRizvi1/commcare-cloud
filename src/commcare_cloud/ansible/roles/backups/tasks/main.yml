# todo:  The backups code doesn't really logically handle what happens when more than one
# todo:  server hosts a service, because it runs the same backup code on all of them,
# todo:  which depending on the service is either redundant (backup happens multiple times)
# todo:  or conflicting (shards uploaded to the same place, overwrite each other)
# todo:  I don't know the implications of this, possibly currently only used on monoliths.

- name: Set up aws credentials
  become: yes
  import_role:
    name: backups
    tasks_from: set_up_aws_credentials.yml
  vars:
    s3_user: "{{ blobdb_user }}"
    s3_user_home_dir: "~{{ blobdb_user }}"
  when: blobdb_s3|bool
  tags:
    - cron
    - backups


- name: Create blobdb backup dir
  become: yes
  file:
    path: "{{ blobdb_backup_dir }}"
    state: directory
    mode: 0700
    group: "{{ blobdb_user }}"
    owner: "{{ blobdb_user }}"
  when: "backup_blobdb and 'shared_dir_host' in group_names"
  tags:
    - cron
    - backups

- name: Copy blobdb backup script
  become: yes
  template:
    src: "create_blobdb_backup.sh.j2"
    dest: "/usr/local/sbin/create_blobdb_backup.sh"
    group: "{{ blobdb_user }}"
    owner: "{{ blobdb_user }}"
    mode: 0700
    backup: yes
  when: "backup_blobdb and 'shared_dir_host' in group_names"
  tags:
    - cron
    - backups

- name: Create Daily Cron job
  become: yes
  cron:
    name: "Backup blobdb daily"
    job: "/usr/local/sbin/create_blobdb_backup.sh daily {{ blobdb_backup_days }}"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: "1,2,3,4,5,6"
    user: "{{ blobdb_user }}"
    cron_file: backup_blobdb
  when: "backup_blobdb and 'shared_dir_host' in group_names"
  tags:
    - cron
    - backups

- name: Create Weekly Cron job
  become: yes
  cron:
    name: "Backup blobdb weekly"
    job: "/usr/local/sbin/create_blobdb_backup.sh weekly {{ blobdb_backup_weeks * 7 }}"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: 0
    user: "{{ blobdb_user }}"
    cron_file: backup_blobdb
  when: "backup_blobdb and 'shared_dir_host' in group_names"
  tags:
    - cron
    - backups

- name: Copy s3 upload script
  become: yes
  template:
    src: "backup_snapshots.py.j2"
    dest: "/usr/local/sbin/backup_snapshots.py"
    group: root
    owner: root
    mode: 0755
    backup: yes
  when: postgres_s3 or couch_s3 or blobdb_s3
  tags:
    - cron
    - backups

- name: Copy check_s3_backup script to /usr/local/bin
  template:
    src: check_s3_backup.py.j2
    dest: /usr/local/bin/check_s3_backup.py
    mode: "u=rwx,g=rx,o=rx"
  when: postgres_s3 or couch_s3 or blobdb_s3
  tags:
    - backup_checks

- name: Create Daily Check Backups Cron job
  become: yes
  cron:
    name: "Check {{ item.service }} s3 backups"
    job: "/usr/local/bin/check_s3_backup.py {{ item.service }} > /tmp/check_s3_backup-{{ item.service }} || { echo /tmp/check_s3_backup-{{ item.service }} | mail -s 'Recent {{ item.service }} backups missing' {{ check_s3_backups_email }}; }"
    state: "{{ 'present' if item.condition else 'absent' }}"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: "1,2,3,4,5,6"
    user: "{{ item.user }}"
    cron_file: "backup_{{ item.service }}"
  with_items:
    - service: 'blobdb'
      condition: "{{ check_s3_backups_email and blobdb_s3 and backup_blobdb and 'shared_dir_host' in group_names }}"
      user: "{{ blobdb_user }}"
    - service: 'postgres'
      condition: "{{ check_s3_backups_email and postgres_s3 and backup_postgres and ('postgresql' in group_names or 'pg_backup' in group_names) }}"
      user: "postgres"
    - service: 'couch'
      condition: "{{ check_s3_backups_email and couch_s3 and backup_couch and ('couchdb2' in group_names) }}"
      user: "couchdb"
  tags:
    - backup_checks
