#!/usr/bin/python
import argparse
import boto3
import datetime

parser = argparse.ArgumentParser(description="S3 Backup Status.")
parser.add_argument('service', choices=['couch','blobdb','postgres'] ,help='Service Name')
args = parser.parse_args()

BUCKET_MAP = {
  'couch': {{ couchdb_snapshot_bucket|tojson }},
  'postgres': {{ postgres_snapshot_bucket|tojson }},
  'blobdb': {{ blobdb_snapshot_bucket|tojson }},
}

PREFIX_MAP = {
  'couch': "couchdb",
  'postgres': "postgres_{{ deploy_env }}",
  'blobdb': "blobdb",
}

BUCKET_NAME = BUCKET_MAP[args.service]
PREFIX = PREFIX_MAP[args.service]

endpoint = {{ aws_endpoint|tojson }}

if not endpoint.startswith("http"):
    endpoint = 'https://' + endpoint

session = boto3.session.Session()
{% if aws_region is defined %}
s3 = session.resource(service_name='s3',endpoint_url=endpoint,region_name='{{ aws_region }}')
{% else %}
s3 = session.resource(service_name='s3',endpoint_url=endpoint)
{% endif %}

bucket = s3.Bucket(BUCKET_NAME)

today = datetime.datetime.today()

backup_filename_format = '{prefix}_{backup_type}_{date}.tar.gz'
daily_options = [backup_filename_format.format(prefix=PREFIX, backup_type='daily', date=(today - datetime.timedelta(days=n)).strftime('%Y_%m_%d')) for n in [0, 1]]
weekly_options = [backup_filename_format.format(prefix=PREFIX, backup_type='weekly', date=(today - datetime.timedelta(days=n)).strftime('%Y_%m_%d')) for n in [0, 1, 2, 3, 4, 5, 6]]

daily_matches = []
weekly_matches = []
# Shows Alert if backup is not uploaded since 2 days.
for obj in bucket.objects.all():
    if obj.key in daily_options:
        daily_matches.append(obj)
    if obj.key in weekly_options:
        weekly_matches.append(obj)

if daily_matches:
    daily_matches.sort(key=lambda obj: obj.last_modified)
    match = daily_matches[-1]
    print('[OK] Last daily {} backup is {}, uploaded @ {}'.format(args.service, match.key, match.last_modified))
else:
    print('[ALERT] No daily {} backup in last two days'.format(args.service))

if weekly_matches:
    weekly_matches.sort(key=lambda obj: obj.last_modified)
    match = weekly_matches[-1]
    print('[OK] Last weekly {} backup is {}, uploaded @ {}'.format(args.service, match.key, match.last_modified))
else:
    print('[ALERT] No weekly {} backup in last seven days'.format(args.service))

if not weekly_matches and not daily_matches:
    exit(-1)
