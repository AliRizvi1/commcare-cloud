#  Variables.tf declares the default variables that are shared by all environments
# $var.region, $var.domain, $var.tf_s3_bucket

# This should be changed to reflect the service / stack defined by this repo
variable "stack" {
  default = "commcarehq"
}

variable "tf_s3_bucket" {
  description = "S3 bucket Terraform can use for state"
  default     = "dimagi-terraform"
}

module "network" {
  source            = "./modules/network"
  vpc_begin_range   = "${var.vpc_begin_range}"
  env               = "${var.environment}"
  azs               = "${var.azs}"
  az_codes          = "${var.az_codes}"
  vpn_connections   = "${var.vpn_connections}"
  vpn_connection_routes = "${var.vpn_connection_routes}"
  external_routes   = "${var.external_routes}"
  openvpn_ip        = "${module.openvpn.openvpn-server-ip}"
}


locals {
  subnet_options = {
  {% for az in az_codes %}
    app-private-{{ az }} = "${lookup(module.network.subnets-app-private, "{{ az }}", "")}"
  {% endfor %}
  {% for az in az_codes %}
    db-private-{{ az }} = "${lookup(module.network.subnets-db-private, "{{ az }}", "")}"
  {% endfor %}
  {% for az in az_codes %}
    public-{{ az }} = "${lookup(module.network.subnets-public, "{{ az }}", "")}"
  {% endfor %}
  }
  security_group_options = {
    "public" = ["${module.network.proxy-sg}", "${module.network.ssh-sg}", "${module.network.vpn-connections-sg}"]
    "app-private" = ["${module.network.app-private-sg}", "${module.network.ssh-sg}", "${module.network.vpn-connections-sg}"]
    "db-private" = ["${module.network.db-private-sg}", "${module.network.ssh-sg}", "${module.network.vpn-connections-sg}"]
  }
}

{% for server in servers %}
module "server__{{ server.server_name }}" {
  source = "./modules/server"

  server_name = {{ server.server_name|tojson }}
  server_instance_type = {{ server.server_instance_type|tojson }}
  network_tier = {{ server.network_tier|tojson }}
  az = {{ server.az|tojson }}
  volume_size = {{ server.volume_size|tojson }}

  server_image = "${var.server_image}"
  environment = "${var.environment}"
  vpc_id = "${module.network.vpc-id}"
  subnet_options = "${local.subnet_options}"
  security_group_options = "${local.security_group_options}"
  key_name = "${var.key_name}"
}
{% endfor %}

{% for server in proxy_servers %}
module "proxy_server__{{ server.server_name }}" {
  source = "./modules/server"

  server_name = {{ server.server_name|tojson }}
  server_instance_type = {{ server.server_instance_type|tojson }}
  network_tier = {{ server.network_tier|tojson }}
  az = {{ server.az|tojson }}
  volume_size = {{ server.volume_size|tojson }}

  server_image = "${var.server_image}"
  environment = "${var.environment}"
  vpc_id = "${module.network.vpc-id}"
  subnet_options = "${local.subnet_options}"
  security_group_options = "${local.security_group_options}"
  key_name = "${var.key_name}"
}

resource "aws_eip" "proxy__{{ server.server_name }}" {
  vpc = true
  instance = "${module.proxy_server__{{ server.server_name }}.server}"
  associate_with_private_ip = "${module.proxy_server__{{ server.server_name }}.server_private_ip}"
}
{% endfor %}


module "Redis" {
  source               = "./modules/elasticache"
  create               = "${lookup(local.redis, "create", true)}"
  cluster_id           = "redis-${var.environment}"
  engine               = "redis"
  engine_version       = "${local.redis["engine_version"]}"
  node_type            = "${local.redis["node_type"]}"
  num_cache_nodes      = "${local.redis["num_cache_nodes"]}"
  parameter_group_name = "${local.redis["parameter_group_name"]}"
  port                 = 6379
  elasticache_subnets  = "${values(module.network.subnets-db-private)}"
  security_group_ids   = ["${module.network.elasticache-sg}", "${module.network.vpn-connections-sg}"]
}

module "openvpn" {
  source = "./modules/openvpn"
  openvpn_image = "${var.openvpn_image}"
  environment = "${var.environment}"
  vpn_size = "${var.openvpn_instance_type}"
  # hardcoded, should be configurable like the others
  instance_subnet = "${module.network.subnets-public["a"]}"
  vpc_id = "${module.network.vpc-id}"
  vpc_cidr = "${module.network.vpc-cidr}"
  key_name = "${var.key_name}"
}

module "Users" {
  source = "./modules/iam"
  account_alias = "${var.account_alias}"
}

{%- for user in (users if manage_users else []) %}
resource "aws_key_pair" {{ user.username|tojson }} {
  key_name = {{ user.username|tojson }}
  public_key = {{ user.public_key|tojson }}
}
module "iam_user__{{ user.username }}" {
  source = "./modules/iam/user"
  username = {{ user.username|tojson }}
  administrators_iam_group = "${module.Users.administrators_iam_group}"
}
{%- endfor %}
